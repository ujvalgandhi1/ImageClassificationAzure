#Test the frame by frame image output for image classification using a previous classifier

from azure.cognitiveservices.vision.customvision.training import CustomVisionTrainingClient
from azure.cognitiveservices.vision.customvision.prediction import CustomVisionPredictionClient
from azure.cognitiveservices.vision.customvision.training.models import ImageFileCreateBatch, ImageFileCreateEntry, Region
from msrest.authentication import ApiKeyCredentials
import os, time, uuid
import pandas as pd
import glob

# Replace with valid values
ENDPOINT = " "  #Use the Cognitive Services endpoint
training_key = " "  #Take from the second resource which is used at the project inception stage
prediction_key = " "  #Take this from the resource created for the Prediction Cog Service
prediction_resource_id = " "  
# use the entire string generated by the Prediction Endpoint

credentials = ApiKeyCredentials(in_headers={"Training-key": training_key})
trainer = CustomVisionTrainingClient(ENDPOINT, credentials)
prediction_credentials = ApiKeyCredentials(in_headers={"Prediction-key": prediction_key})
predictor = CustomVisionPredictionClient(ENDPOINT, prediction_credentials)

os.chdir(' ')  #Put the local folder where the code module resides
#Additional settings
publish_iteration_name = " "  #Use the name of the model, not the iteration name
project_name = " "  #Use the project name
projectid = ""   #Use the project id. Run the code in lines 37 through 40 to get the project id
base_image_location = base_image_location = os.path.join (os.path.dirname(__file__), "Images")
#You can use any sub folder in the main folder but change the name of the folder where the images reside that need image classification

#Get the project credentials
project = trainer.get_project(projectid)

#Getting the tag
tags = trainer.get_tags(projectid)

#for i in tags:
 #       print(i)
#print(project.id)
#print(tags)

#Running the classification


#Testing the prediction end point
# Now there is a trained endpoint that can be used to make a prediction
prediction_credentials = ApiKeyCredentials(in_headers={"Prediction-key": prediction_key})
predictor = CustomVisionPredictionClient(ENDPOINT, prediction_credentials)
output_folder = "" #Put the folder where the csv files will be placed. 


directory = ' '  #Use the folder where the images are

for filename in os.listdir(directory):
    if filename.endswith("jpg"):
        
        with open(os.path.join(directory, filename), "rb") as image_contents:
            results = predictor.classify_image(
        project.id, publish_iteration_name, image_contents.read())

        # Display the results.

        with open('%s.csv' %filename, 'wt') as csv:

            os.chdir('')   #Use the folder where the csv files need to be written
                
            csv.write("ImageName,TagName,Probability\n")
            for prediction in results.predictions:
        #for tag          
                csv.write((filename + "," +  prediction.tag_name + 
             ", {0:.2f}%".format(prediction.probability * 100)+"\n")
        )

# Once the individual files are generated, using glob to combine them into one corpus
extension = 'csv'
all_filenames = [i for i in glob.glob('*.{}'.format(extension))]

combined_csv = pd.concat([pd.read_csv(f) for f in all_filenames ])

os.chdir(' ')  #Use the folder where the final combined file needs to reside. 
combined_csv.to_csv('ImageClassificationFinal.csv', index=False) #Saving our combined csv data as a new file!


#Remove all csv files created individually
directory = " "  #Folder where the csv files are there

files_in_directory = os.listdir(directory)
filtered_files = [file for file in files_in_directory if file.endswith(".csv")]

for file in filtered_files:
	path_to_file = os.path.join(directory, file)
	os.remove(path_to_file)